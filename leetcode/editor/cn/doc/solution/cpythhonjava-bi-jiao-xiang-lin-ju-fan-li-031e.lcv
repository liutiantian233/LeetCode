思路和心得：

# （一） 比较相邻，举反例

* []

```python3
class Solution:
    def isAlienSorted(self, words: List[str], order: str) -> bool:
        order_index = {c:i for i,c in enumerate(order)}
        for i in range(len(words) -1):
            word1 = words[i]
            word2 = words[i+1]
            for j in range(min(len(word1), len(word2))):
                if word1[j] != word2[j]:#一旦出现不一样
                    if order_index[word1[j]] > order_index[word2[j]]:
                        return False
                    break   #break了，else就不执行
            else:   #前面一直一样，长的应当排在后面
                if len(word1) > len(word2):
                    return False
        return True
```

* []

```c++
class Solution 
{
public:
    bool isAlienSorted(vector<string>& words, string order) 
    {
        unordered_map<char, int> char_id;
        for (int i = 0; i < 26; i ++)
            char_id[order[i]] = i;
        
        int wn = words.size();
        for (int i = 1; i < wn; i ++)
        {
            string wa = words[i - 1];
            string wb = words[i];
            int an = wa.size();
            int bn = wb.size();
            bool find = false;
            for (int j = 0; j < min(an, bn); j ++)
            {
                if (wa[j] != wb[j])
                {
                    if (char_id[wa[j]] > char_id[wb[j]])
                        return false;
                    find = true;
                    break;
                }
            }
            if (find == false)
            {
                if (an > bn)
                    return false;
            }
        }

        return true;
    }
};
```

* []

```java
class Solution 
{
    public boolean isAlienSorted(String[] words, String order) 
    {
        Map<Character, Integer> char_id = new HashMap<>();
        for (int i = 0; i < 26; i ++)
            char_id.put(order.charAt(i), i);

        int wn = words.length;
        for (int i = 1; i < wn; i ++)
        {
            String wa = words[i - 1];
            String wb = words[i];
            int an = wa.length();
            int bn = wb.length();
            boolean find = false;
            for (int j = 0; j < Math.min(an, bn); j ++)
            {
                if (wa.charAt(j) != wb.charAt(j))
                {
                    if (char_id.get(wa.charAt(j)) > char_id.get(wb.charAt(j)))
                        return false;
                    find = true;
                    break;
                }
            }
            if (find == false)
            {
                if (an > bn)
                    return false;
            }
        }

        return true;
    }
}
```

